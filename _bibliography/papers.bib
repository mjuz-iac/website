@article{Sokolowski:2023:Decentralizing,
  acronym = {IEEE Software},
  file = {papers/2023_Decentralizing-Infrastructure-as-Code.pdf},
  author = {Sokolowski, Daniel and Weisenburger, Pascal and Salvaneschi, Guido},
  title = {Decentralizing Infrastructure as Code},
  year = {2023},
  month = feb,
  issue_date = {January--February 2023},
  journal = {IEEE Software},
  volume = {40},
  number = {1},
  numpages = {6},
  pages = {50--55},
  publisher = {IEEE},
  address = {Los Alamitos, CA, USA},
  issn = {0740-7459},
  doi = {10.1109/MS.2022.3192968},
  keywords = {DevOps, Infrastructure as Code, Cloud},
  abstract = {Infrastructure as Code (IaC) automates deployments for single teams, falling short of decentralized deployments across groups. We need mature IaC solutions that embrace and consolidate software engineering principles to enable testing and automation advances for decentralized organizations.},
}

@inproceedings{Sokolowski:2022:Infrastructure,
  acronym = {ESEC/FSE DS},
  file = {papers/2022_Infrastructure-as-Code-for-Dynamic-Deployments.pdf},
  author = {Sokolowski, Daniel},
  title = {Infrastructure as Code for Dynamic Deployments},
  booktitle = {Proceedings of the 30th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
  series = {ESEC/FSE '22},
  year = {2022},
  month = nov,
  numpages = {5},
  pages = {1775--1779},
  location = {Singapore},
  publisher = {ACM},
  address = {New York, NY, USA},
  isbn = {978-1-4503-9413-0},
  doi = {10.1145/3540250.3558912},
  keywords = {DevOps, Infrastructure as Code, Cloud, Software Evolution, Testing},
  abstract = {Modern DevOps organizations require a high degree of automation to achieve software stability at frequent changes. Further, there is a need for flexible, timely reconfiguration of the infrastructure, e.g., to use pay-per-use infrastructure efficiently based on application load. Infrastructure as Code (IaC) is the DevOps tool to automate infrastructure. However, modern static IaC solutions only support infrastructures that are deployed and do not change afterward. To implement infrastructures that change dynamically over time, static IaC programs have to be (updated and) re-run, e.g., in a CI/CD pipeline, or configure an external orchestrator that implements the dynamic behavior, e.g., an autoscaler or Kubernetes operator. Both do not capture the dynamic behavior in the IaC program and prevent analyzing and testing the infrastructure configuration jointly with its dynamic behavior.\par To fill this gap, we envision dynamic IaC, which augments static IaC with the ability to define dynamic behavior within the IaC program. In contrast to static IaC programs, dynamic IaC programs run continuously. They re-evaluate program parts that depend on external signals when these change and automatically adjust the infrastructure accordingly. We implement DIaC as the first dynamic IaC solution and demonstrate it in two realistic use cases of broader relevance. With dynamic IaC, ensuring the program's correctness is even harder than for static IaC because programs may define many target configurations in contrast to only a few. However, for this reason, it is also more critical. To solve this issue, we propose automated, specialized property-based testing for IaC programs and implement it in ProTI.},
}

@inproceedings{Sokolowski:2021:Automating,
  acronym = {ESEC/FSE},
  file = {papers/2021_Automating-Serverless-Deployments-for-DevOps-Organizations.pdf},
  author = {Sokolowski, Daniel and Weisenburger, Pascal and Salvaneschi, Guido},
  title = {Automating Serverless Deployments for DevOps Organizations},
  booktitle = {Proceedings of the 29th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
  series = {ESEC/FSE '21},
  year = {2021},
  location = {Athens, Greece},
  publisher = {ACM},
  address = {New York, NY, USA},
  doi = {10.1145/3468264.3468575},
  supp = {https://doi.org/10.5281/zenodo.4888908},
  code = {https://github.com/mjuz-iac/mjuz},
  abstract = {DevOps unifies software development and operations in cross-functional teams to improve software delivery and operations (SDO) performance. Ideally, cross-functional DevOps teams independently deploy their services, but the correct operation of a service often demands other services, requiring coordination to ensure the correct deployment order. This issue is currently solved either with a central deployment or manual out-of-band communication across teams, e.g., via phone, chat, or email. Unfortunately, both contradict the independence of teams, hindering SDO performance – the reason why DevOps is adopted in the first place. \par In this work, we conduct a study on 73 IT professionals, showing that, in practice, they resort to manual coordination for correct deployments even if they expect better SDO performance with fully automated approaches. To address this issue, we propose μs ([mju:z] “muse” ), a novel IaC system automating deployment coordination in a fully decentralized fashion, still retaining compatibility with DevOps practice – in contrast to today's solutions. We implement µs, demonstrate that it effectively enables automated coordination, introduces negligible definition overhead, has no performance overhead, and is broadly applicable, as shown by the migration of 64 third-party IaC projects.},
}

@inproceedings{Sokolowski:2021:Deployment,
  acronym = {ESEC/FSE},
  file = {papers/2021_Deployment-Coordination-for-Cross-Functional-DevOps-Teams.pdf},
  author = {Sokolowski, Daniel},
  title = {Deployment Coordination for Cross-Functional DevOps Teams},
  booktitle = {Proceedings of the 29th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
  series = {ESEC/FSE '21},
  year = {2021},
  location = {Athens, Greece},
  publisher = {ACM},
  address = {New York, NY, USA},
  doi = {10.1145/3468264.3473101},
  abstract = {Software stability and reliability are the core concerns of DevOps. They are improved by tightening the collaboration between developers and operators in cross-functional teams on the one hand and by automating operations through continuous integration (CI) and infrastructure as code (IaC) on the other hand. Ideally, teams in DevOps are fully independent. Still, their applications often depend on each other in practice, requiring them to coordinate their deployment through centralization or manual coordination.\par With this work, we propose and implement the novel IaC solution µs ([mju:z] ”muse”), which automates deployment coordination in a decentralized fashion. µs is the first approach that is compatible with the DevOps goals as it enables truly independent operations of the DevOps teams. We define our research problem through a questionnaire survey with IT professionals and evaluate the solution by comparing it to other modern IaC approaches, assessing its performance, and applying it to existing IaC programs.},
}

