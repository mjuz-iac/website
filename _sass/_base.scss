.bg-primary {
  background-color: $mjuz-color !important;
}

a {
  color: $mjuz-color;
}

a:hover {
  color: $mjuz-dark-color;
}

$navbar-height: 46px;
$navbar-small-height: 58px;
$navbar-small-break: 576px;

.navbar-height {
  height: $navbar-height;
  @media(min-width: $navbar-small-break) {
    height: $navbar-small-height;
  }
}

.pnav {
  padding-top: $navbar-height;
  @media(min-width: $navbar-small-break) {
    padding-top: $navbar-small-height;
  }
}

article:before {
  margin-top: -$navbar-height;
  height: $navbar-height;
  @media(min-width: $navbar-small-break) {
    margin-top: -$navbar-small-height;
    height: $navbar-small-height;
  }
  content: "";
  display: block;
}

span.mjuz {
  position: relative;

  &:first-letter {
    font-style: italic;
    margin-right: 100%;
    margin-left: .1em;
    text-transform: lowercase;
  }

  &:after {
    content: 'S';
    position: absolute;
    font-weight: inherit;
    top: 0;
    left: 0;
    transform: scale(.65, .65) translate(.8em, .17em);
  }

  font-family: "Times New Roman";
  display: inline-block;
  transform: scale(1.6, 1.6) translate(.1em, 0.04em);
  overflow: hidden;
  line-height: 1.2em;
  height: 1.2em;
  width: 1.3em;
  word-break: break-all;
  margin-top: -1em;
}

.h1, .h2, .h3, .h4, .h5, .h6, h1, h2, h3, h4, h5, h6 {
  span.mjuz:after {
    font-weight: bold;
  }
}

.jumbotron {
  background: linear-gradient(
                  115deg,
                  rgba(255, 255, 255, 1) 40%,
                  rgba(13, 152, 186, 1) 75%
  );

  h1 {
    img {
      margin: -10% -18% 0 -18%;
      width: 128%;
      max-height: 80vh;
    }

    font-weight: normal;
    width: 350px;
    max-width: 100%;
    font-size: 1.8rem;
  }

  .card img {
    height: 150px;
    width: 150px;
  }

  .container:first-child {
    min-height: m#{i}n(900px, 75vh);
  }
}

// Bibliography

ol.bibliography {
  list-style: none;
  padding: 0;
  margin-top: 0;

  li {
    margin-bottom: 2rem;

    .abbr {
      display: inline;
      text-align: right;
      float: right;
    }
  }
}

// Use cases animation

#uc-anim {

  // Controls

  input {
    display: none;
  }

  .form-check-input[type="radio"]:after {
    width: .625rem;
    height: .625rem;
    transform: translate(-50%, -50%);
    background: transparent;
    position: absolute;
    left: 50%;
    top: 50%
  }

  .controls label[for="play"] .fa-play {
    font-size: .8rem;
    transform: translate(5%, -40%);
  }

  #play:checked ~ .controls label[for="play"] {
    color: $mjuz-color;
    border-color: $mjuz-color;
  }

  @mixin activeControlAfterProps {
    background-color: $mjuz-color;
  }
  @mixin notActiveControlAfterProps {
    background-color: transparent;
  }
  @function controlAfterSelector($slide) {
    @return '.controls label[for="slide-#{$slide}"]:after'
  }
  @mixin notActiveControlProps {
    border-color: #757575;
  }
  @mixin activeControlProps {
    border-color: $mjuz-color;
  }
  @function controlSelector($slide) {
    @return '.controls label[for="slide-#{$slide}"]'
  }
  @mixin activateControl($slide) {
    #{controlSelector($slide)} {
      @include activeControlProps;
    }
    #{controlAfterSelector($slide)} {
      @include activeControlAfterProps;
    }
  }

  // Captions

  .captions {
    label {
      cursor: pointer;
    }

    .list-group-flush {
      max-height: 0;
      opacity: 0;
      visibility: hidden;
      margin-right: -1.5rem;
      transition: max-height .5s, opacity .5s;
    }
  }

  @mixin showCaptionGroupProps {
    margin-bottom: -.5rem;
    opacity: 1;
    visibility: visible;
    max-height: 500px;
  }
  @mixin hideCaptionGroupProps {
    margin-bottom: 0;
    opacity: 0;
    visibility: hidden;
    max-height: 0;
  }
  @function captionGroupSelector($slide) {
    @return '.captions label[for="slide-#{$slide}"] .list-group-flush'
  }
  @mixin showCaptionGroup($slide) {
    #{captionGroupSelector($slide)} {
      @include showCaptionGroupProps;
    }
  }

  @mixin noHighlightCaptionProps {
    background-color: $white-color;
    border-color: rgba(0, 0, 0, .125);
    color: #616161;
  }
  @mixin highlightCaptionProps {
    background-color: $mjuz-color;
    border-color: $mjuz-color;
    color: $white-color;
  }
  @function captionSelector($slide) {
    @return '.captions label[for="slide-#{$slide}"]'
  }
  @mixin highlightCaption($slide) {
    #{captionSelector($slide)} {
      @include highlightCaptionProps;
    }
  }

  // Animation

  $slidesCount: 15;
  $duration: 40;
  $delay: 1 / $duration;
  @function slideT($slide) {
    @return ($slide / ($slidesCount+1));
  }

  @for $i from 1 through $slidesCount {
    #slide-#{$i}:checked ~ {
      @include activateControl($i);
      @include highlightCaption($i);
    }
  }

  @mixin showCaptionGroupRange($slide, $from, $to) {
    @for $i from $from through $to {
      #slide-#{$i}:checked ~ {
        @include showCaptionGroup($slide);
      }
    }

    @keyframes captionGroupAnimation#{$slide} {
      #{slideT($from) * 100%} {
        @include hideCaptionGroupProps
      }
      #{(slideT($from) + $delay) * 100%} {
        @include showCaptionGroupProps
      }
      #{slideT($to + 1) * 100%} {
        @include showCaptionGroupProps
      }
      #{(slideT($to + 1) + $delay) * 100%} {
        @include hideCaptionGroupProps
      }
    }
  }
  @include showCaptionGroupRange(1, 1, 3);
  @include showCaptionGroupRange(4, 4, 8);
  @include showCaptionGroupRange(9, 9, 12);
  @include showCaptionGroupRange(13, 13, 15);

  @for $slide from 1 through $slidesCount {
    $slideStart: slideT($slide) * 100%;
    $slideStartDelay: (slideT($slide) + $delay) * 100%;
    $slideEnd: slideT($slide + 1) * 100%;
    $slideEndDelay: (slideT($slide + 1) + $delay) * 100%;

    @keyframes activeControlAnimation#{$slide} {
      #{$slideStart} {
        @include notActiveControlProps
      }
      #{$slideStartDelay} {
        @include activeControlProps
      }
      #{$slideEnd} {
        @include activeControlProps
      }
      #{$slideEndDelay} {
        @include notActiveControlProps
      }
    }
    @keyframes activeControlAfterAnimation#{$slide} {
      #{$slideStart} {
        @include notActiveControlAfterProps
      }
      #{$slideStartDelay} {
        @include activeControlAfterProps
      }
      #{$slideEnd} {
        @include activeControlAfterProps
      }
      #{$slideEndDelay} {
        @include notActiveControlAfterProps
      }
    }
    @keyframes hightlightCaptionAnimation#{$slide} {
      #{$slideStart} {
        @include noHighlightCaptionProps
      }
      #{$slideStartDelay} {
        @include highlightCaptionProps
      }
      #{$slideEnd} {
        @include highlightCaptionProps
      }
      #{$slideEndDelay} {
        @include noHighlightCaptionProps
      }
    }
  }

  @mixin animation($animation) {
    animation: $animation #{$duration}s infinite;
  }

  #play:checked ~ {
    @for $slide from 1 through $slidesCount {
      #{controlSelector($slide)} {
        @include animation(activeControlAnimation#{$slide});
      }

      #{controlAfterSelector($slide)} {
        @include animation(activeControlAfterAnimation#{$slide});
      }

      #{captionGroupSelector($slide)} {
        @include animation(captionGroupAnimation#{$slide});
      }

      #{captionSelector($slide)} {
        @include animation(hightlightCaptionAnimation#{$slide});
      }
    }
  }
}

